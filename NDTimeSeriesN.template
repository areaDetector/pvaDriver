#=================================================================#
# Template file: NDROIStatN.template
###################################################################
#
# Database template for TimeSeries plugin. These are the signal
# specific records. Multiple instances of this template can be
# loaded, each with a different ADDR (which specifies the signal).
#
# Macros:
# P,R - Base PV name
# PORT - Asyn port name
# SIGNAL - The address to use for this signal (start at 0, up tomaxSignals-1)
# TIMEOUT - Asyn port timeout
#
# Mark Rivers
# February 26, 2016
#
###################################################################


###################################################################
#  These records control whether this signal is used              #
###################################################################
record(bo, "$(P)$(R)Use")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TS_SIGNAL_USE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   info(autosaveFields, "VAL")
}

record(bi, "$(P)$(R)Use_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TS_SIGNAL_USE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

###################################################################
#  The name of this signal                                        #
###################################################################
record(stringout, "$(P)$(R)Name")
{
   field(PINI, "YES")
   field(DTYP, "asynOctetWrite")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TS_SIGNAL_NAME")
   info(autosaveFields, "VAL")
}

###################################################################
#  Time series records for this signal                            #
###################################################################
record(waveform, "$(P)$(R)TimeSeries")
{
   field(DTYP, "asynFloat64ArrayIn")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TS_TIME_SERIES")
   field(NELM, "$(NCHANS)")
   field(FTVL, "DOUBLE")
   field(SCAN, "I/O Intr")
}

record(waveform, "$(P)$(R)FFTReal")
{
   field(DTYP, "asynFloat64ArrayIn")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TS_FFT_REAL")
   field(NELM, "$(NCHANS)")
   field(FTVL, "DOUBLE")
   field(SCAN, "I/O Intr")
}

record(waveform, "$(P)$(R)FFTImaginary")
{
   field(DTYP, "asynFloat64ArrayIn")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TS_FFT_IMAGINARY")
   field(NELM, "$(NCHANS)")
   field(FTVL, "DOUBLE")
   field(SCAN, "I/O Intr")
}

record(waveform, "$(P)$(R)FFTAbsValue")
{
   field(DTYP, "asynFloat64ArrayIn")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TS_FFT_ABS_VALUE")
   field(NELM, "$(NCHANS)")
   field(FTVL, "DOUBLE")
   field(SCAN, "I/O Intr")
}

