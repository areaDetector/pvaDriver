#=================================================================#
# Template file: NDTimeSeries.template
###################################################################
#
# Database template for TimeSeries plugin. 
# Macros:
# P,R - Base PV name
# PORT - Asyn port name
# ADDR - The Asyn address
# TIMEOUT - Asyn port timeout
#
# Matt Pearson
# Nov 2014
#
###################################################################

include "NDPluginBase.template"

###################################################################
#  These records control time series                              #
###################################################################
record(mbbo, "$(P)$(R)TSControl")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TS_CONTROL")
   field(ZRVL, "0")
   field(ZRST, "Erase/Start")
   field(ONVL, "1")
   field(ONST, "Start")
   field(TWVL, "2")
   field(TWST, "Stop")
   field(THVL, "3")
   field(THST, "Read") 
}

# This record periodically pokes the TSControl record with 3 to read the time series
# but only when TSAcquiring = Acquiring
record(longout, "$(P)$(R)TSRead")
{
   field(SDIS, "$(P)$(R)TSAcquiring NPP NMS")
   field(DISV, "0")
   field(OUT,  "$(P)$(R)TSControl PP MS")
   field(VAL,  "3")
   field(SCAN, "1 second")
   info(autosaveFields, "SCAN")
}

record(longout, "$(P)$(R)TSNumPoints")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TS_NUM_POINTS")
   field(VAL,  "$(NCHANS)")
   field(DRVH, "$(NCHANS)")
   info(autosaveFields, "VAL")
}

record(longin, "$(P)$(R)TSCurrentPoint")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TS_CURRENT_POINT")
   field(SCAN, "I/O Intr")
}

record(bi, "$(P)$(R)TSAcquiring")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TS_ACQUIRING")
   field(ZNAM, "Done")
   field(ONAM, "Acquiring")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(mbbo, "$(P)$(R)TSAcquireMode")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TS_CONTROL")
   field(ZRVL, "0")
   field(ZRST, "Fixed length")
   field(ONVL, "1")
   field(ONST, "Circular buffer")
}

record(bo, "$(P)$(R)TSComputeFFT")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TS_COMPUTE_FFT")
   field(ZNAM, "Done")
   field(ONAM, "Compute")
}

record(waveform, "$(P)$(R)TSTimestamp")
{
   field(DTYP, "asynFloat64ArrayIn")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TS_TIMESTAMP")
   field(NELM, "$(NCHANS)")
   field(FTVL, "DOUBLE")
   field(SCAN, "I/O Intr")
}

record(waveform, "$(P)$(R)TSTimeArray")
{
   field(DTYP, "asynFloat64ArrayIn")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TS_TIME_ARRAY")
   field(NELM, "$(NCHANS)")
   field(FTVL, "DOUBLE")
   field(SCAN, "I/O Intr")
}

record(waveform, "$(P)$(R)TSFreqArray")
{
   field(DTYP, "asynFloat64ArrayIn")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TS_FREQ_ARRAY")
   field(NELM, "$(NCHANS)")
   field(FTVL, "DOUBLE")
   field(SCAN, "I/O Intr")
}
